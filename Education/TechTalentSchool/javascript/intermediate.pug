doctype html
html(lang='en')
    head
        meta(charset='utf-8')
        title TechTalentSchool | Intermediate JavaScript 
        meta(name='author' content='Kostas Minaidis')
        meta(name='apple-mobile-web-app-capable' content='yes')
        meta(name='apple-mobile-web-app-status-bar-style' content='black-translucent')
        meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        // Bulma.io | https://cdnjs.com/libraries/bulma
        link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css')
        link(rel='stylesheet' href='../libs/reveal.js/css/reveal.css')
        link#theme(rel='stylesheet' href='../libs/reveal.js/css/theme/black-tts.css')
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/hack-font@3/build/web/hack.css')
        // Roboto | Google Web Fonts
        link(href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900' rel='stylesheet')
        // Theme used for syntax highlighting of code
        link(rel='stylesheet' href='../libs/reveal.js/lib/css/monokai-sublime-sha.css')
        link(rel='stylesheet' href='../css/reveal-overrides.css')
        link(rel='stylesheet' href='../css/reveal-tts.css')

        script(defer src="https://use.fontawesome.com/releases/v5.6.3/js/all.js" integrity="sha384-EIHISlAOj4zgYieurP0SdoiBYfGJKkgWedPHH4jCzpCXLmzVsw1ouK59MuUtP4a1" crossorigin="anonymous")

        style.
            a.full-anchor {
                position: fixed;
                top     : -50%;
                left    : -50%;
                width   : 200vw;
                height  : 200vh;
                text-indent: -50000px;
            }
            .reveal .slide-background {
                background-size: contain;
            }
            .svg_contain svg {
                position:absolute;
                top     :0;
                left    :0;
                width   :100%;
                height  :auto;"
            }
        style.
            #array_recap pre.small { margin-bottom: -8px; }

        style#tts.

            .reveal.tts-intro {
                background-image: url('images/tts-titles-js-intermediate.jpg');
            }
            .reveal.tts-outro {
                background-image: url('images/tts-titles-joinus.jpg');
            }
            .reveal.tts-intro,
            .reveal.tts-outro {
                background-repeat: no-repeat;
                background-size: contain;
                background-position: center;
            }
            .reveal.tts-intro .progress,
            .reveal.tts-outro .progress {
                display: none !important;
            }      
            .linebreak {
                display: block;
                height: 10px;
            }
            /* Bulma Overrides */
            code { background-color: transparent; }

    body

        // Alt+Click | Zoom
        // S | Speaker View
        // B or . | Pause View

        .reveal
            .slides

                // TTS | INTRO
                section#tts-intro.tts-title(data-state='tts-intro' data-transition="fade-out")

                // INTRO
                section(data-transition="fade-out")
                    h2 Intermediate JavaScript
                    h3.colorful Front-end Bootcamp
                    p
                        small
                            | Created by 
                            a(href='https://github.com/kostasx') Kostas Minaidis
                            |  | Dec 2018
                    p
                        img.tts_logo(style='width:140px; height:94px;' src='../img/tts-logo.png' alt='')

                // AGENTA
                section
                    h3 Agenta
                    ul(style='font-size:0.8em;')
                        li Variables &amp; Scope In-Depth: <strong>var</strong>, <strong>let</strong> &amp; <strong>const</strong>
                        li Hoisting
                        li Advanced Array Manipulation Methods
                        li Working with the DOM
                        li Events and User Input
                        li Async: Callbacks, Promises
                        li JSON &amp; Fetch()
                        li Prototypes &amp; Function Constructors
                        li Understanding `this` &amp; Explicit Binding: call, apply, bind 

                // var, let, const & SCOPE
                section(data-background='#9cbf3f')
                    section
                        h1 JS Variables 
                        h2(style='color:white;')
                            strong var
                            | , 
                            strong let
                            |  and 
                            strong const
                    section
                        img(src='images/advanced/let_var_const_01.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_02.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_03.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_04.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_05.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_06.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_07.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_08.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_09.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_10.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_11.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_12.jpg' alt='')
                    section
                        img(src='images/advanced/let_var_const_13.jpg' alt='')
                    section(data-background='#9cbf3f')
                        h2 Confused?
                        a.fragment(href="https://codepen.io/kostasx/pen/pqvWPw?editors=1100" target="_blank")
                            h4 CodePen to the rescue:<br/>https://bit.ly/2ElTkcl
                    section(data-background='#9cbf3f')
                        h3 General Rule:
                        p.fragment "Use <strong style="color:black">let</strong> only for loop counters or only if you really need reassignment. Everywhere else, use <strong style="color:black">const</strong>."

                // HOISTING [ WiP ]
                section
                    section(data-background="#fff")
                        img(src="./intermediate/hoisting-img.jpg")
                    section(data-background="#fff")
                        h6 Definition:
                        img(src="./intermediate/hoisting.jpg")
                        p.small ( Ανέλκυση )
                    section
                        p.
                            "Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution."
                        .linebreak
                        i.fragment.fas.fa-exclamation-triangle.colorful-svg(style="margin-bottom:20px")
                        h6.fragment.colorful(style="font-weight: 400;") "Of note however, is the fact that the hoisting mechanism only moves the <strong>declaration</strong>. The assignments are left in place."
                    section
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                doSomething();

                                for (let i = 0; i <= 10; i++) {
                                    console.log(i);
                                }

                                function doSomething() {
                                    console.log('function executed');
                                }
                        .columns
                            .column.is-10.is-offset-1

                                p.small.fragment "Although the <code>doSomething()</code> function is called before it's defined,<br>the code still works." 

                                p.small.fragment "In fact, the <code>for loop</code> isn't started until the JavaScript engine figures out that <code>doSomething()</code> is defined and can execute the call."
                    section
                        h6 Best Practices
                        ul
                            li Place your variable and function declarations at the top section of the scope in which they are declared
                            li Place value assignments to variables before accessing them

                    section
                        h6 CodePen Examples:
                        p
                            a(target="_blank" href="https://codepen.io/kostasx/pen/jXOzGX?editors=0011") Variable Hoisting: https://bit.ly/2GaIZBu
                        p
                            a(target="_blank" href="https://codepen.io/kostasx/pen/MZWVZW?editors=0011") Function Hoisting: https://bit.ly/2L5vMZt
                        p
                            a(target="_blank" href="https://codepen.io/kostasx/pen/xmxWeg?editors=0011") Function Variables Hoisting: https://bit.ly/2zPhIzc
                        p
                            a(target="_blank" href="https://codepen.io/kostasx/pen/ZVExmY?editors=0011") Undeclared Variables: https://bit.ly/2EmZQQ0

                // Array Manipulation | Recapping
                section

                    section
                        h2
                            | Manipulating 
                            strong.colorful Arrays
                        h4
                            | Recapping: 
                            strong.colorful push
                            | , 
                            strong.colorful pop
                            | , 
                            strong.colorful shift
                            | , 
                            strong.colorful unshift

                    section#array_recap
                        <pre class="small">
                            <code class="hljs" data-trim contenteditable>let todo = [ ];</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>todo.push("ENTRY");</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>[ "ENTRY" ]</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>todo.push("AT THE END");</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>[ "ENTRY", "AT THE END" ]</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>todo.shift();</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>[ "AT THE END" ]</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>todo.unshift( "AT START" );</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>[ "AT START", "AT THE END" ]</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>todo.pop();</code>
                        </pre> 
                        <pre class="fragment small">
                            <code class="hljs" data-trim contenteditable>[ "AT START" ]</code>
                        </pre> 

                    section
                        p
                            | Tip: You can also create a new Array
                            br
                            | using the following syntax:
                        <pre>
                            <code class="hljs" data-trim contenteditable>let someArray = new Array( 1, "text", false );</code>
                        </pre> 
                        p.fragment ...but we tend to prefer the [ ] syntax.

                // Advanced Array Manipulation
                section

                    section
                        h2 Manipulating <strong class="colorful">Arrays</strong>

                    // reverse()
                    section

                        <h3>Array<strong class="colorful">.reverse()</strong></h3>

                        pre
                            code.hljs(data-trim contenteditable).
                                let listOfNumbers = [ 1, 2, 3, 4, 5 ];

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                listOfNumbers.reverse();

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                console.log( listOfNumbers );

                        p.fragment
                            small Will output

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                [ 5, 4, 3, 2, 1]

                        p.fragment
                            small
                                <strong class="colorful">WARNING: </strong> reverse() will <strong>mutate</strong> (change) the contents of the Array!

                        .linebreak
                        a.fragment( href="https://codepen.io/kostasx/pen/MZYraW?editors=0011" target="_blank") Quick Practice!
                        .linebreak

                        small.fragment
                            a(target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse") More on Array.prototype.reverse()

                    // sort()
                    section

                        <h3>Array<strong class="colorful">.sort()</strong></h3>

                        <p>
                            <small>Sorts an Array lexicographically using the ordered <a href="https://unicode-table.com/en/" target="_blank">Unicode character table</a><br/>or a custom sorting function. Works on a character-by-character basis.
                            </small>
                        </p>

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                let someNames = [ "Eve", "Adam", "Bob", "Bill", "adam" ];

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                console.log( someNames.sort() );

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                [ 'Adam', 'Bill', 'Bob', 'Eve', 'adam' ];

                        <p class="fragment">
                            <small>
                                <strong class="colorful">Warning: </strong>Numbers get converted to Strings and are compared alphabetically:
                            </small>
                        </p>

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                let someNumbers = [ 2, 11, 1 ];

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                console.log( someNumbers.sort() );

                        pre.fragment.small
                            code.hljs(data-trim contenteditable).
                                [ 1, 11, 2 ]

                    // sort() #2
                    section
                        <p><small>So how do we compare a list of numbers using <strong class="colorful">sort()</strong>?</small></p>
                        <p class="fragment"><small>We need to pass a custom sorting function<br/>as an argument to the sort() function.</small></p>

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                let someNumbers = [ 2, 11, 1 ];

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                let sorting = function( a, b ){
                                if ( a < b ){ 
                                    return -1; 
                                } else if ( a > b ){ 
                                    return 1; 
                                } else { return 0; }	// a === b
                                }

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                console.log( someNumbers.sort( sorting ) );

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                [ 1, 2, 11 ]

                        p.fragment.small
                            a(href="https://youtu.be/MWD-iKzR2c8?t=171" target="_blank") Watch: Coding Train - Custom sorting function for Array sort()

                    // slice() INTRO
                    section

                        h3 Let's slice some Arrays!
                        img(src="./intermediate/pizza-slice.png", alt="")

                    // slice()
                    section

                        h3 Array<strong class="colorful">.slice( start, until )</strong>

                        <p class="fragment"><small>Returns a portion of the Array beginning at the <strong class="colorful">start</strong> index<br/>up to (but not including) the <strong class="colorful">until</strong> index.</small></p>

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
                                // Index -->     0       1        2        3         4

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( animals.slice( 2, 4 ) );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                [ "camel", "duck" ]

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( animals.slice( 1, 5 ) );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                [ "bison", "camel", "duck", "elephant" ]

                        p.fragment
                            <small>If the second parameter (<strong class="colorful">until</strong>) is omitted, slice extracts through the end of the Array.
                            </small>

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( animals.slice( 2 ) );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                [ "camel", "duck", "elephant" ]

                    // slice() tip : clone an Array 
                    section

                        <p>Tip: Using Array<strong class="colorful">.slice()</strong> to clone an Array</p>
                        <p class="Dfragment"><small>When the first slice argument is omitted, it is automatically set to index 0.</small></p>

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                let numbers = [ 1, 2, 3, 4 ];</code>

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                let reversedNumbers = numbers.slice();

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                reversedNumbers.reverse();

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                console.log( numbers );

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                [ 1, 2, 3, 4 ]

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                console.log( reversedNumbers );

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                [ 4, 3, 2, 1 ]

                        p.fragment.small
                            a(href="http://www.pythontutor.com/javascript.html#code=let%20numbers%20%3D%20%5B%201,%202,%203,%204%20%5D%3B%0Alet%20reversedNumbers%20%3D%20numbers.slice%28%29%3B%0AreversedNumbers.reverse%28%29%3B%0Aconsole.log%28%20numbers%20%29%3B%0Aconsole.log%28%20reversedNumbers%20%29%3B&curInstr=0&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D" target="_blank") Visualisation

                    // concat() 
                    section

                        h3 Array<strong class="colorful">.concat( Array, Array )</strong>
                        small Merges 2 or more Arrays

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let array1 = ['a', 'b', 'c'];
                                let array2 = ['d', 'e', 'f'];

                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let merged = array1.concat( array2 );
                                console.log( merged );

                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                // merged === Array ["a", "b", "c", "d", "e", "f"]

                        .linebreak
                        a.fragment(target="_blank" href="https://codepen.io/kostasx/pen/XoJZWe?editors=0011") Quick Practice!


                    // splice() 
                    section

                        <h3>Array<strong class="colorful">.splice( start, deleteCount )</strong></h3>
                        <small>Removes or adds elements to an Array, and returns the removed/added elements.</small>

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
                                // Index -->     0       1        2        3         4
        
                        .linebreak
                        small.fragment Remove 1 element from index 3
        
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let duck = animals.splice( 3, 1 );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( duck );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                "duck"

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                // animals:
                                             [ 'ant', 'bison', 'camel', 'elephant' ]
                                // Index -->     0       1        2          3

                        .linebreak
                        small.fragment Remove 2 elements from index 1

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let bisonAndCamel = animals.splice( 1, 2 );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                // animals:

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                [ 'ant', 'elephant' ]

                    // splice() #02 
                    section

                        h3 Array<strong class="colorful">.splice( start, deleteCount )</strong>

                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
                                // Index -->     0       1        2        3         4

                        .linebreak
                        small.fragment Remove 1 element from index 2, and insert 'monkey'

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                animals.splice( 2, 1, 'monkey' );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                            [ 'ant', 'bison', 'monkey', 'duck', 'elephant' ]
                                //--> Index     0       1        2         3          4

                        .linebreak
                        small.fragment Insert 1 element at index 3

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                animals.splice( 3, 0, 'gorilla' );

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                [ 'ant', 'bison', 'monkey', 'gorilla', 'duck', 'elephant' ]

                        <a style="font-size:0.6em" class="fragment" target="_blank" href="https://codepen.io/kostasx/pen/OvBjaY">A Visual Guide to Array.prototype.splice</a>

                    // map() 
                    section

                        h3 Array<strong class="colorful">.map()</strong>

                        p <small>Creates a new array with the results of calling a provided function<br/>on every element in the calling array.</small>

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).
                                let numbers = [ 2, 4, 8 ];

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).
                                let modify = function( element ){
                                    return element * element;
                                } 

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).
                                let squares = numbers.map( modify );

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( squares );

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).
                                [ 4, 16, 64 ]

                    // map() (Under the Hood)
                    section

                        p
                            small Array.map() Under the hood...

                        pre.fragment.fade-up
                            code.hljs.javascript(data-trim contenteditable).

                                let numbers = [ 2, 4, 8 ];
                                function modify( element ){
                                    return element * element;
                                }
                                let results = numbers.map( modify );

                        p.fragment
                            small.
                                [ <strong class="colorful">2</strong>, 4, 8 ]
                            br
                            small
                                <span class="fragment">modify( <strong class="colorful">2</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> 2 * 2 </span><span class="fragment"> <span class="hljs-comment">--></span> 4 </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 4 ]</span></span>


                        p.fragment
                            small.
                                [ 2, <strong class="colorful">4</strong>, 8 ]
                            br
                            small
                                <span class="fragment">modify( <strong class="colorful">4</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> 4 * 4 </span><span class="fragment"> <span class="hljs-comment">--></span> 16 </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 4, 16 ]</span></span>

                        p.fragment
                            small.
                                [ 2, 4, <strong class="colorful">8</strong> ]
                            br
                            small
                                <span class="fragment">modify( <strong class="colorful">8</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> 8 * 8 </span><span class="fragment"> <span class="hljs-comment">--></span> 64 </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 4, 16, 64 ]</span></span>
                                </small>

                    // .forEach() 
                    section

                        h3 Array<strong class="colorful">.forEach( test )</strong>

                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let numbers = [ 2, 4, 8 ];
                                function modify( element ){
                                    return element * element;
                                }
                                let results = numbers.forEach( modify ); // undefined
                                results = numbers.map( modify );         // [ 4, 16, 64 ]

                    // filter() 
                    section

                        h3 Array<strong class="colorful">.filter( test)</strong>

                        p <small>Runs the custom <strong class="colorful">test</strong> function for all Array elements.<br/>Creates a new Array with all the elements that passed the test function.</small>

                        pre.fragment.fade-up
                            code.hljs(data-trim contenteditable).
                                let ages = [ 15, 22, 23, 44, 11, 18 ];

                        pre.fragment.fade-up
                            code.hljs(data-trim contenteditable).
                                function isAdult( age ){
                                  return ( age > 18 ); 
                                }

                        pre.fragment.fade-up
                            code.hljs(data-trim contenteditable).
                                let passed = ages.filter( isAdult );

                        pre.fragment.fade-up
                           code.hljs(data-trim contenteditable).
                                [22, 23, 44] // passed 

                        <p class="small fragment"><span>CodePen</span>	
                            <a target="_blank" href="https://codepen.io/kostasx/pen/xyZZRg?editors=0012">https://bit.ly/2P6pwlx</a>
                        </p>

                    // filter() (Under the Hood)
                    section

                        p Array.filter() Under the hood...

                    // filter() (Under the Hood)
                    section

                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                let ages = [ 15, 22, 44, 11 ];
                                function isAdult( age ){ 
                                    return ( age > 18 ); 
                                }
                                let passed = ages.filter( isAdult );
                        
                        p.fragment(style="margin-bottom:0")
                            small.
                                [ <strong class="colorful">15</strong>, 22, 44, 11 ]
                            br
                            small
                                <span class="fragment">isAdult( <strong class="colorful">15</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> ( 15 > 18 ) </span><span class="fragment"> <span class="hljs-comment">--></span> false </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ ]</span></span>

                        p.fragment(style="margin:0")
                            small.
                                [ 15, <strong class="colorful">22</strong>, 44, 11 ]
                            br
                            small
                                <span class="fragment">isAdult( <strong class="colorful">22</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> ( 22 > 18 ) </span><span class="fragment"> <span class="hljs-comment">--></span> true </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 22 ]</span></span>

                        p.fragment(style="margin:0")
                            small.
                                [ 15, 22, <strong class="colorful">44</strong>, 11 ]
                            br
                            small
                                <span class="fragment">isAdult( <strong class="colorful">44</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> ( 44 > 18 ) </span><span class="fragment"> <span class="hljs-comment">--></span> true </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 22, 44 ]</span></span>

                        p.fragment(style="margin:0")
                            small.
                                [ 15, 22, 44, <strong class="colorful">11</strong> ]
                            br
                            small
                                <span class="fragment">isAdult( <strong class="colorful">11</strong> );</span> <span class="fragment"> <span class="hljs-comment">--></span> ( 11 > 18 ) </span><span class="fragment"> <span class="hljs-comment">--></span> false </span><span class="fragment"> <span class="hljs-comment">--></span> <span class="hljs-title">[ 22, 44 ]</span></span>

                    // reduce()
                    section

                        h3 Array<strong class="colorful">.reduce()</strong>

                        p <small>Goes through each element, runs a function and returns an accumulator.</small>

                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let numbers = [ 12, 8, 10, 5, 5 ];
                                let sum = function( accumulator, currentValue ){

                                    accumulator = accumulator + currentValue;
                                    return accumulator;

                                }
                                numbers.reduce( sum, 0 );
                                &nbsp;

                    // Chaining
                    section
                        h3 Quick mention: Chaining
                        p.small <span>CodePen</span>	
                            <a target="_blank" href="https://codepen.io/kostasx/pen/zmrrdo?editors=0012">https://bit.ly/2RhnZL7</a>

                // YouTube: (map) https://www.youtube.com/watch?v=bCqtb-Z5YGQ
                // YouTube: (reduce) https://www.youtube.com/watch?v=Wl98eZpkp-c

                // PRACTICE: Array Manipulation
                section(data-transition="slide" data-background="#F7BE2C" data-background-transition="zoom")

                    <h2>Let's practice on the<br/>Array methods!</h2>
                    <a class="black" target="_blank" href="https://codepen.io/kostasx/pen/NyaPjY?editors=0011">https://goo.gl/<strong>qtoLF4</strong></a>
                    <br>
                    <a class="black" target="_blank" href="https://codepen.io/kostasx/pen/xyKyMg?editors=0012">https://goo.gl/<strong>Vh8bMf</strong></a>

                // Basic DOM Manipulation 
                section

                    section
                        h3 <strong class="colorful">DOM</strong> | The Document Object Model

                    section
                        p The Document Object Model (DOM) is the programmable interface of web pages.
                        .linebreak
                        p.fragment In other words, it allows JavaScript programs to read and manipulate the page content, structure and CSS styles.

                    section
                        p DOM is basically a tree-like<br/>structure of the web page
                        img.fragment(src="./images/advanced/DOM-Kirupa.webp" alt="")
                        .linebreak
                        a.fragment( target="_blank" href="https://software.hixie.ch/utilities/js/live-dom-viewer/") Live DOM Viewer
                    
                    section
                        p All objects of an HTML page are included and can be manipulated by the DOM.
                        .linebreak
                        p.fragment The DOM is an interface that allows programs and scripts to dynamically update webpages: add and delete HTML elements, move elements to another place, change their CSS style, and more. 

                    // Basic DOM Terms: document, element, NodeList
                    section
                        h6 What does DOM contains?
                        ul
                            li Elements: <strong class="colorful">&lt;head&gt;</strong>, <strong class="colorful">&lt;body&gt;</strong>, <strong class="colorful">&lt;div&gt;</strong>, etc.
                            li Attributes: <strong class="colorful">class</strong>, <strong class="colorful">id</strong>, <strong class="colorful">href</strong>, <strong class="colorful">src</strong>, etc.
                            li All text in-between (including spaces)
                        p.fragment All these objects are known as DOM <strong class="colorful">Nodes</strong>.

                    // Examples of Nodes
                    section
                        h6 Example of Nodes?
                        .linebreak
                        pre.fragment
                            code.hljs.html(data-trim contenteditable).
                                <a href="https://google.com" rel="index"> Google </a>
                        .linebreak
                        ul
                            li.fragment <strong class="colorful">&lt;a&gt;</strong> is an <strong class="colorful">Element</strong> Node
                            li.fragment <strong class="colorful">href</strong> and <strong class="colorful">rel</strong> are <strong class="colorful">Attribute</strong> Nodes
                            li.fragment <strong class="colorful">Google</strong> is a <strong class="colorful">Text</strong> Node
                        .linebreak
                        img.fragment(src="./intermediate/attribute_nodes.jpg", alt="")

                    // Basic Terminology
                    section
                        h6 Basic Terminology
                        ul

                            li <strong class="colorful">document:</strong> the root object

                            li <strong class="colorful">Node:</strong> refers to an object (member of the DOM)

                            li <strong class="colorful">element:</strong> refers to an HTML element (member of the DOM)

                            li <strong class="colorful">nodeList:</strong> A collection (array-like) of elements

                    // Basic DOM Manipulation
                    section
                        h2 Basic <strong class="colorful">DOM</strong> Manipulation
                        p.fragment.
                            document<strong class="colorful">.getElementById()</strong>;
                        p.fragment.
                            document<strong class="colorful">.querySelector()</strong>;
                        p.fragment.
                            document<strong class="colorful">.getElementsByTagName()</strong>;
                        p.fragment.
                            document<strong class="colorful">.createElement()</strong>;
                        p.small.fragment *Note: plural verbs return lists...

                    // Elements Properties and Methods
                    section
                        h2 Elements
                        p.fragment.
                            Element<strong class="colorful">.appendChild()</strong>;
                        p.fragment.
                            Element<strong class="colorful">.remove()</strong>;
                        p.fragment.
                            Element<strong class="colorful">.setAttribute( key, value )</strong>;
                        p.fragment.
                            Element<strong class="colorful">.innerHTML</strong>
                        p.fragment.
                            Element<strong class="colorful">.textContent</strong> / Element<strong class="colorful">.innerText*</strong>
                        p.fragment.small
                            a(href="https://codepen.io/kostasx/pen/vvNWvG?editors=0011" target="_blank") *CodePen
                        p.fragment.
                            Element<strong class="colorful">.style</strong>

                    // John Tsevdos
                    // DOM Manipulation
                    section
                      h2 DOM Manipulation
                      ul
                        li Querying the DOM
                        li Modifying properties, attributes and HTML classes
                        li Creating, modifying and removing HTML Elements

                    section
                      h2 Querying the DOM
                      <p>Open your favorite web site (or
                      <a href="https://v4-alpha.getbootstrap.com/examples/jumbotron/" target="_blank">click here</a>) and navigate the DOM!
                      </p>

                    // Basic DOM API
                    section
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                document.getElementById('hero'); 
                                // Selects the element with the specific id

                                document.getElementsByTagName('p'); 
                                // Selects all ellements that matching the tag

                                document.getElementsByClassName('btn'); 
                                // Selects all ellements that match CSS class

                                document.querySelector('h1'); 
                                // Selects the first h1 element that match selector

                                document.querySelectorAll('h2'); 
                                // Selects all the elements that match selector
                       
                    // The DOM Element Family
                    section
                        h2 Meet the "family"
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                const $el = document.querySelector('.container');

                                $el.parentNode;
                                $el.children;
                                $el.children.length;
                                $el.firstElementChild;
                                $el.lastElementChild;
                                $el.previousElementSibling;
                                $el.nextElementSibling;

                    // Modifying DOM Elements
                    section

                        h2 Modifying properties and attributes

                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                const $title = document.querySelector('h1');
                                const $img = document.querySelector('.img');

                                $title.id = 'my-ID';
                                $title.innerHTML = 'Hi all!';
                                $img.setAttribute("alt", "My image");

                    // Modifying innerHTML
                    section

                      h2 Fun with innerHTML on console
                      p Open your favorite web site console and paste the code:

                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                function YOLO() {

                                    const links = document.querySelectorAll("a");

                                    Array.from( links ).map( function(link){

                                        link.innerHTML = "YOLO" 

                                    });

                                }

                                YOLO();

                    // Modifying CSS Classes
                    section

                        h2 Modifying HTML classes
                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                const $el = document.querySelector( 'h1' );

                                $el.classList.add( 'myClass' );

                                $el.classList.remove( 'myClass' );

                                $el.classList.toggle( 'myClass' );

                    // Create and Append
                    section
                      h2 DOM Manipulation:
                      h3 Create and append
                      p Create a codepen (<a href="https://codepen.io/kostasx/pen/pxzQwy" target="_blank">example</a>)

                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                const $paragraph = document.createElement( 'p' );

                                $paragraph.innerHTML = "Hello world!";

                                document.body.appendChild( $paragraph );

                    // Create and insertBefore 
                    section
                        h2 DOM Manipulation
                        h3 Create and insertBefore
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                const $paragraph = document.createElement( 'p' );
                                $paragraph.innerHTML = "Hello world!";
                                document.body.appendChild( $paragraph );

                                const $title = document.createElement( 'h1' );
                                $title.innerHTML = "Welcome to JavaScript DOM Magic!";

                                // parentNode.insertBefore( Node, referenceNode );
                                document.body.insertBefore( $title, $paragraph );
                        .linebreak
                        a(href="https://codepen.io/kostasx/pen/NeGwYv?editors=0011" target="_blank") CodePen Example

                    // Remove
                    section
                        h2 DOM Manipulation: Remove
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                const $el = document.querySelector( 'h1' );

                                $el.remove();

                    // TODO: Hands-on Link
                    section
                        p Quick Hands-on (Array.map + DOM)
                        a(target="_blank" href="https://codepen.io/kostasx/pen/Gdmgom?editors=0010") https://bit.ly/2z7wSPI

                // EVENTS
                section

                        // What are Events?
                        section
                          h2 Events &amp; Capturing User Input
                          ul
                            li.fragment Events are actions that happen in time
                            li.fragment They might be triggered from the user or the browser
                            li.fragment We have many <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank">DOM events</a> but most of the times we use mouse and keyboard events.

                        // Click Event
                        section
                            h2 Click event
                            pre
                                code.hljs.html(data-trim contenteditable).
                                    <button id="MyButton" type="button">Click me</button>
                            br
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    const $btn = document.querySelector('#MyButton');

                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).

                                    function clickHandler( event ){
                                        console.log( event.type + ' got fired!' );
                                        console.log( this );
                                    }

                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).

                                    $btn.addEventListener( 'click', clickHandler );

                            p.fragment
                                <a href="https://codepen.io/kostasx/pen/zmOXae?editors=1010" target="_blank">CodePen</a><br>
                                <a target="_blank" class="bitly_link" href="https://bit.ly/2O34Sq5">https://bit.ly/<strong>2O34Sq5</strong></a>

                        // The Event Object
                        section
                          h2 Meet the event object
                          ul
                            li event.<strong class="colorful">type</strong>
                            li event.<strong class="colorful">target</strong>
                            li event.<strong class="colorful">preventDefault()</strong>
                            li and a lot more depending the event type!

                        // PRACTICE: Click Event
                        section
                          h2 Click event hands on
                          p
                            Solve this <a href="https://codepen.io/kostasx/pen/QZLPVa?editors=0010" target="_blank">exercise</a><br>
                              <a target="_blank" class="bitly_link" href="https://bit.ly/2DZADeZ">https://bit.ly/<strong>2DZADeZ</strong></a>
                              
                        // List of Events
                        section
                          h2 Most used events
                          ul
                            li click
                            li mouseenter
                            li mouseleave
                            li mousedown
                            li mouseup
                            li mousemove
                            li keydown
                            li keyup
                            li blur
                            li focus

                        // The KeyUp Event
                        section
                            h2 The KeyUp Event
    
                            pre
                                code.hljs.html(data-trim contenteditable).
                                    <input id="myInput" type="text">
                            br
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    const $input = document.querySelector( '#myInput' );

                                    function keyUpHandler( event ){
                                        console.log( event.type + event.target.value );
                                    }

                                    $input.addEventListener( 'keyup', keyUpHandler );

                            p
                                <a href="https://codepen.io/kostasx/pen/vVBMPK?editors=1111" target="_blank">codepen</a><br>
                                <a target="_blank" class="bitly_link" href="https://bit.ly/2O5M6OB">https://bit.ly/<strong>2O5M6OB</strong></a>

                        // PRACTICE: KeyUp Event
                        section
                          h2 Keyup Event Hands-On
                          <p>Solve this <a href="https://codepen.io/kostasx/pen/zmOXbX" target="_blank">exercise</a><br>
                              <a target="_blank" href="https://bit.ly/2yfveKK" class="bitly_link">https://bit.ly/<strong>2yfveKK</strong></a></p>

                        // Mouseenter + Mouseleave
                        section
                            h2 The mouseenter &amp; mouseleave Events
                            pre
                                code.hljs.javascript(data-trim contenteditable).

                                    $img.addEventListener( 'mouseenter', function( event ){

                                        console.log( event.type + event.target );

                                    });

                                    $img.addEventListener( 'mouseleave', function( event ){

                                        console.log( event.type + event.target );

                                    });

                            p
                                <a href="https://codepen.io/kostasx/pen/mzbgZR?editors=1011" target="_blank">codepen</a>
                                <br>
                                <a href="https://bit.ly/2zTJwmp" class="bitly_link" target="_blank">https://bit.ly/<strong>2zTJwmp</strong></a>

                        // Mouseenter + Mouseleave
                        section
                          h2 Mouseenter and mouseleave event hands on
                          ul
                            <li>Solve this <a href="https://codepen.io/kostasx/pen/mzbYbR" target="_blank">exercise</a></li>

                        // On Page Load
                        section
                            h2 On Page Load

                            pre
                                code.hljs.html(data-trim contenteditable).
                                    &lt;/body&gt;
                                    &lt;script&gt;
                                        function init( event ){

                                            console.log( event.type );
                                            // Main App Code

                                        }

                                        document.addEventListener('DOMContentLoaded', init );
                                    &lt;/script&gt;
                            p
                                <a href="https://codepen.io/kostasx/pen/pxzmvx" target="_blank">codepen</a>

                // TODO: PRACTICE 
                // https://codepen.io/KPouianou/pen/KQXPvK?editors=0010" 

                // ASYNC: Callbacks & Promises 
                section

                    // Async Intro 
                    section
                        h3.big Async
                        h4 Handling Asynchronous code with Callbacks and Promises

                    // Sync Example 
                    section
                        h2 Sync
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( 1 );
                                console.log( 2 );
                                console.log( 3 );

                        p.fragment Will output:

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                1
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                2
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                3

                    // Sync Example with Blocking Execution 
                    section
                        h2 Sync Example with Blocking Execution
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( 1 );
                                slowConnectionToDatabase();
                                console.log( "Rest of the code..." );

                        p.fragment Execution

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                1

                        pre.fragment
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                                
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                "Rest of the code..."

                    // Async Pattern 
                    section
                        h2 Asynchronous Execution
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                console.log( 1 );
                                slowConnectionToDatabase();
                                console.log( "Rest of the code..." );

                        p.fragment Execution

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                1

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                // slowConnectionToDatabase() starts execution but does not block the rest of the code...
                                
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                "Rest of the code..."

                        pre.fragment
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .
                            span.fragment .

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                // Result from slowConnectionToDatabase() comes back...

                    // Async Example 
                    section
                        h2 Example

                        pre
                            code.hljs.javascript(data-trim contenteditable).

                                console.log( 1 );

                                function displayTwo(){

                                    console.log( 2 );

                                }

                                setTimeout( displayTwo, 1000 );

                                console.log( 3 );

                        <p class="small" style="font-style: italic;">*Functions can be passed as arguments</p>

                        p.fragment Will output:

                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                1
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                3
                        pre.fragment
                            code.hljs(data-trim contenteditable).
                                2

                    // Live Example 
                    section
                        p Let's dive deeper to see how to deal with asynchronous code...
                        <a target="_blank" href="https://codepen.io/kostasx/pen/oavKer?editors=0012">Codepen</a>

                    // Resources
                    section
                        p More on Callbacks:
                        <a target="_blank" href="https://javascript.info/callbacks">JavaScript.info: Introduction to Callbacks</a>

                        p More on Promises:
                        <a target="_blank" href="https://javascript.info/promise-basics">JavaScript.info: Promise Basics</a>
                        .linebreak
                        a( href="https://egghead.io/courses/javascript-promises-in-depth" target="_blank") JavaScript Promises in Depth

                // JSON 
                section

                    section
                        h1 JSON
                        <h4 class="fragment">(<strong class="colorful">J</strong>ava<strong class="colorful">S</strong>cript <strong class="colorful">O</strong>bject <strong class="colorful">N</strong>otation)</h4>
                        <p class="fragment">A Data Format</p>

                    // What is JSON
                    section
                        <h2>What is JSON</h2>
                        <ul>
                          <li class="fragment">JSON is a simple &amp; lightweight data-interchange format</li>
                          <li class="fragment">It is easy for humans to read and write</li>
                          <li class="fragment">It is easy for machines to parse and generate</li>
                          <li class="fragment">It is completely language independent and a common web standard</li>
                        </ul>
                        <p class="small fragment">
                            <a href="http://json.org/json-el.html" target="_blank">JSON (Ελληνικά)</a>
                        </p>

                    // JSON Values
                    section
                        h2 JSON allowed values
                        ul
                          <li class="fragment">string</li>
                          <li class="fragment">number</li>
                          <li class="fragment">object</li>
                          <li class="fragment">array</li>
                          <li class="fragment">boolean</li>
                          <li class="fragment">null</li>
                          <li class="fragment"><strike>functions</strike></li>

                    // JSON Example
                    section
                        h2 An example
                        pre
                            code.hljs.json(data-trim contenteditable).
                                {
                                    "firstname": "Kostas",
                                    "lastname": "Minaidis",
                                    "address": {
                                        "city": "Athens",
                                        "street": "24, My Street",
                                    },
                                    "isMarried": false,
                                    "hobbies": [
                                        "books",
                                        "coding"
                                    ]
                                }

                    // JSON Stringify
                    section
                        h2 Convert an object to JSON
                        p JSON.stringify
                        <div class="columns">
                            <div class="column">
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        const me = {
                                            firstname: 'Kostas',
                                            lastname: 'Minaidis',
                                            hobbies: [
                                                "books", "coding"
                                            ]
                                        };
                                        const meJSON = JSON.stringify( me );
                                        console.log( meJSON );
                            </div>
                            <div class="column">

                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        '{
                                            "firstname": "Kostas",
                                            "lastname": "Minaidis",
                                            "hobbies": [
                                                "books",
                                                "coding"
                                            ]
                                        }'
                            </div>
                        </div>
                        <p class="small">Check: <strong>typeof</strong> me and <strong>typeof</strong> meJSON</p>

                    // JSON Parse
                    section
                        h2 Convert a JSON to object
                        p JSON.parse
                        <div class="columns">
                            <div class="column">
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        const meJSON = `{
                                        "firstname": "Kostas",
                                        "lastname": "Minaidis",
                                        "address": {
                                            "city": "Athens",
                                            "street": "24, My Street"
                                        },
                                        "isMarried": false,
                                        "hobbies": [ "books", "coding" ]
                                        }`;
                                        const me = JSON.parse(meJSON);
                                        console.log(me);
                            </div>
                            <div class="column">

                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        {
                                        firstname: 'Kostas',
                                        lastname: 'Minaidis',
                                        address: {
                                            city: 'Athens',
                                            street: '24, My Street',
                                        },
                                        isMarried: false,
                                        hobbies: [
                                            "books", "coding"
                                        ]
                                        }
                            </div>
                        </div>
                        <p class="small">Mention Template literals. Check: <strong>typeof</strong> me and <strong>typeof</strong> meJSON</p>

                    // JSON Examples Online
                    section
                        div.column
                            div.column
                                h3 JSON Examples Online
                                <a target="_blank" href="https://jsonplaceholder.typicode.com/posts/1/">JSON Placeholder</a>
                                h4 <a target="_blank" href="https://bit.ly/2RfcGCR">https://bit.ly/<span style="color:white;">2RfcGCR</span></a>
                                <ul>
                                    <li class="fragment">1) Open link and Copy the JSON data</li>
                                    <li class="fragment">2) Open Browser console, declare a variable <strong class="colorful">let json = ...</strong class="colorful"> and paste the copied JSON data as a value.</li>
                                    <li class="fragment">3) Type <strong class="colorful">json</strong> to get the object contents.</li>
                                    <li class="fragment">4) Retrieve the object Post title...</li>
                                </ul>

                    // Custom JSON
                    section
                        h3 Create and serve your<br>own sample JSON data
                        br
                        .columns
                            .column
                                h6 <a target="_blank" href="https://bit.ly/2NbOeiE">https://bit.ly/<span style="color:white;">2NbOeiE</span></a>
                                <p class="small">(Server emulation)</p>
                                <ul>
                                    <li>1) Open: <a target="_blank" href="https://bit.ly/2NbOeiE">MyJSON</a></li>
                                    <li>2) Paste the Code on the left</li>
                                    <li>3) Copy the JSON URI <p class="small">(<a target="_blank" href="https://api.myjson.com/bins/e6h14">https://api.myjson.com/bins/e6h14</a>)</p></li>
                                </ul>
                                
                            .column
                                pre
                                    code.hljs.json(data-trim contenteditable).
                                        {
                                            "title": "On the Road",
                                            "author": "Jack Kerouac",
                                            "published": 1957,
                                            "isNovel": true,
                                            "characters": [ "Sal", "Dean" ]
                                        }					        				

                    // Recap #1
                    section
                        h2 JSON Recap
                        h4 Which of these is JSON?
                        p.colorful remember JSON is slightly different from Javascript Objects
                        .columns
                            .column
                                pre
                                    code.hljs.json(data-trim contenteditable).
                                        {
                                            "firstname": "John",
                                            "lastname": "Doe",
                                            "age": 35,
                                            "address": {
                                                "city": "Athens",
                                                "street": "my street",
                                                "number": 12
                                            }
                                        }
                            .column
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        {
                                            firstname: "John",
                                            lastname: "Doe",
                                            age: 35,
                                            address: {
                                                city: "Athens",
                                                street: "my street",
                                                number: 12
                                            }
                                        }

                    // Recap JSON.parse()
                    section
                        h2 JSON.parse
                        h5 Takes a JSON string -&gt; Returns a Javascript Object 
                        .columns
                            .column.is-12
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        let user = JSON.parse( "{'name':'nick','age':27}" );

                                        console.log( user );
                                .linebreak
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        {
                                          name: "nick",
                                          age: 27
                                        }
                      
                    // Recap JSON.stringify() 
                    section
                        <h2>JSON.stringify</h2>
                        <h4>Takes a Javascript Object -> Returns a JSON string </h4>
                        <h4 style="color: lightgreen; font-weight: .5em">It's the reverse of JSON.parse </h4>
                        .columns.is-centered
                            .column.is-10
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        JSON.stringify({ name: "nick", age: 27 });
                                .linebreak
                                pre
                                    code.hljs.javascript(data-trim contenteditable).
                                        "{'name':'nick','age':27}"

                // FETCH 
                section

                    // What is FETCH?
                    section
                        div.columns
                            .column.is-10.is-offset-1
                                h2 fetch()
                                ul
                                    <li class="fragment">fetch API provides a JavaScript interface for making HTTP requests</li>
                                    <li class="fragment"><strong class="colorful">fetch()</strong> method provides an easy way to fetch resources asynchronously</li>
                                    <li class="fragment"><strong class="colorful">fetch()</strong> is the modern alternative to the old and more complicated AJAX API</li>
                                    <li class="fragment"><strong class="colorful">fetch()</strong> method returns a Promise</li>

                    // fetch() Example 
                    // TODO: Add Copy Functionality button for easily copying and pasting example codes in the console
                    section
                        h2 fetch example
                        .columns
                            .column
                                p
                                    <a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank">Documentation</a>

                                pre
                                    code.fragment.hljs.multiline.javascript(data-trim contenteditable).
                                        fetch('https://jsonplaceholder.typicode.com/posts/1/')
                                    code.fragment.hljs.multiline.javascript(data-trim contenteditable).
                                        .then(function(response) {
                                            return response.json();
                                        })
                                    code.fragment.hljs.multiline.javascript(data-trim contenteditable).
                                        .then(function(data) {
                                            console.log(data)
                                        });
                    // FETCH +  APIS
                    section
                        h1 Fetch + APIs
                        a(href="https://codepen.io/kostasx/pen/XyRdgX?editors=0010" target="_blank") OMDB API

                    section
                        h2 Error Handling with Promises
                        a(href="https://codepen.io/kostasx/pen/oJjENo?editors=0011" target="_blank") CodePen

                // PRACTICE: Fetch + JSON Async 
                section(data-transition="slide" data-background="#F7BE2C" data-background-transition="zoom")
                    h2 Let's Practice Promises! 

                    <a class="black" target="_blank" href="https://bit.ly/2It2pPI">https://bit.ly/<strong>2It2pPI</strong> (Promises)</a>

                    br

                    <a class="black" target="_blank" href="https://bit.ly/2y3RLdl">https://bit.ly/<strong>2y3RLdl</strong> (Async/Await)</a>

                // ES5 Prototypes + Function Constructors 
                section
                    section
                        h3 Prototype and Prototypal Inheritance
                        .columns
                            .column.is-8.is-offset-2
                                ul
                                    <li>The <strong>new</strong> keyword and the Function constructor</li>
                                    <li>What is <strong>this</strong>?</li>
                                    <li>The road to ES6 Classes...</li>
                                
                    section
                        p
                            <a target="_blank" href="https://blog.bitsrc.io/understanding-javascripts-prototypal-inheritance-354292253bcb">Understanding JavaScript’s Prototypal Inheritance</a>
                        p
                            p
                                <img src="images/advanced/prototype.png" alt="">
                            <a target="_blank" href="https://codepen.io/kostasx/pen/yRLBaZ?editors=0012">Time for a quick CodePen...</a>

                // this, call, apply, bind
                section
                    // INTRODUCTION
                    section
                        h3 Understanding <strong class="colorful">this</strong>
                        .columns
                            .column.is-10.is-offset-1

                                p.small When a function is invoked an execution context is created which is like a record containing information about where the function was called from (call-stack), how the function was invoked, what parameters were passed, etc. One of the properties of this record is the <strong class="colorful">this</strong> reference which will be used for the duration of that function's execution.

                                p.small.fragment What <strong class="colorful">this</strong> references is determined entirely<br/>by the call-site where the function is called.
                    // GLOBAL CONTEXT
                    section
                        h3 <strong class="colorful">this</strong> in Global Context
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                console.log( this );

                                function run(){
                                    console.log( this );
                                }
                        .linebreak
                        p.small.fragment Both functions run within the global <strong class="colorful">(window)</strong> object.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                window.console.log( this );
                                window.run();
                        p.small.fragment In both cases, <strong class="colorful">this</strong> references the window object (the functions' call-site).
                    // FUNCTION CONSTRUCTORS + CLASSES
                    section
                        h3 <strong class="colorful">this</strong> in Function Constructors
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function Person( name ){
                                    console.log( this );
                                    this.name = name;
                                    this.show = function(){
                                        console.log( this.name );
                                    }
                                }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = new Person( "Kostas" );
                                person.show();
                        p.small.fragment <strong class="colorful">this</strong> is a reference to the Object created<br/>by the Function constructor using the <strong class="colorful">new</strong> keyword.
                        p.small.fragment But...
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                Person( "Mary" );
                    // ES6 CLASSES
                    section
                        h3 <strong class="colorful">this</strong> in ES6 Classes
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                class Person {
                                    constructor( name ){
                                        console.log( this );
                                        this.name = name;
                                    }
                                    show(){
                                        console.log( this.name );
                                    }
                                }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                let person = new Person( "Kostas" );
                                person.show();
                        p.small.fragment Since ES6 Classes are based on Function Constructors<br/>and Objects, they behave in much the same way.
                    // OBJECT METHODS
                    section
                        h3 <strong class="colorful">this</strong> in Object Methods
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = {
                                    name: "Kostas",
                                    show: function(){
                                        console.log( this, this.name );
                                    }
                                }
                        p.fragment.small When a function is called as a method of an object,<br/>its <strong class="colorful">this</strong> is set to the object the method is called on.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                person.show();
                                // person { }, "Kostas"
                    // OBJECT METHODS #2
                    section
                        h3 <strong class="colorful">this</strong> in Object Methods #2
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = {
                                    name: "Kostas",
                                    show: function(){
                                        console.log( this, this.name );
                                    }
                                }
                                let other = {
                                    name: "Mary"
                                }
                                other.show = person.show;
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                other.show();
                                // other { }, "Mary"
                        p.fragment.small <strong class="colorful">REMEMBER</strong>: <strong class="colorful">this</strong> is set to the object the method is <strong class="colorful">called on</strong>.
                    // DOM Event Handlers
                    section
                        h3 <strong class="colorful">this</strong> in DOM Event Handlers
                        button#clickme(style="padding:10px 20px; font-size: 1.5rem") Click Me!
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let $button = document.querySelector("#clickme");

                                $button.addEventListener( "click", function(){

                                    console.log( this );

                                });
                        p.small.fragment When a function is used as an event handler,<br/>its <strong class="colorful">this</strong> is set to the element the event fired from.
                    // bind, call, apply
                    section
                        h3 Explicit Binding:<br/><strong class="colorful"> bind(), apply(), call()</strong>
                    // bind
                    section
                        h3 <strong class="colorful"> bind()</strong>
                        p.fragment Bind <strong class="colorful">this</strong> to <strong class="colorful">any</strong> Object explicitly.
                        button.fragment#somebutton(style="padding:10px 20px; font-size: 1.5rem") Some Button!
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { name: "Kostas" }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let $button = document.querySelector("#somebutton");
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                function handleClick(){ console.log( this ); }
                        .linebreak
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                $button.addEventListener( "click", handleClick.bind( person ) );
                    // bind #2
                    section
                        h3 <strong class="colorful"> bind()</strong> #2
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { name: "Kostas" }

                                function show(){
                                    console.log( this.name );
                                }

                                show();

                                let personShow = show.bind( person );

                                personShow();
                    // call, apply
                    section
                        h3 <strong class="colorful"> call(), apply()</strong>
                        .linebreak
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let person = { 
                                    name: "Kostas",
                                    show: function( msg, end ){
                                        console.log( msg + this.name + end );
                                    } 
                                }
                                person.show( "Hello ", "!" );    // Hello Kostas!

                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let other = { name: "Mary" }

                                person.show.call( other, "Hi ", "!" );
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                person.show.apply( other, [ "Hi ", "!" ] );
                    // ARROW FUNCTIONS                            
                    section
                        h3 <strong class="colorful">this</strong> in Arrow Functions
                        p.small.fragment Arrow functions don't provide their own this binding<br/>It retains the this value of the enclosing lexical context.
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        setTimeout(function(){
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                obj.show();
                                /// undefined
                    // ARROW FUNCTIONS #2
                    section
                        p.small Remember: setTimeout is called from window and thus<br/>its inner function binds <strong class="colorful">this</strong> to its context (that of the calling site).
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(function(){
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 
                        p.small.fragment How can we change this?
                    // ARROW FUNCTIONS #3
                    section
                        p.small #1 Using bind()
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(function(){
                                         console.log( this.name );
                                        }.bind( this ), 2000)
                                    }
                                } 
                    // ARROW FUNCTIONS #4
                    section
                        p.small #2 Using an Arrow Function
                        pre
                            code.hljs.javascript(data-trim contenteditable).
                                let obj = {
                                    name: "Kostas",
                                    show: function(){ 
                                        window.setTimeout(()=>{
                                         console.log( this.name );
                                        }, 2000)
                                    }
                                } 
                    // SUMMARY
                    section
                        h3 Summary
                        p.small.fragment Determining the <strong class="colorful">this</strong> binding for an executing function<br/>requires finding the direct call-site of that function.
                        p.small.fragment Once examined, four rules can be applied<br/>to the call-site, in this order of precedence:
                        p.small.fragment - Called with <strong class="colorful">new</strong>? Use the newly constructed object.
                        p.small.fragment - Called with <strong class="colorful">call</strong> or <strong class="colorful">apply</strong> (or <strong class="colorful">bind</strong>)? Use the specified object.
                        p.small.fragment - Called with a <strong class="colorful">context object</strong> owning the call? Use that context object.
                        p.small.fragment <strong class="colorful">- Default</strong>: undefined in strict mode, global object otherwise.
                    // RECAP
                    section
                        h6 Recap...
                        h6 ...through some examples
                        a(href="https://www.w3schools.com/js/js_this.asp" target="_blank") W3Schools
                        br
                        a.fragment(href="https://codepen.io/kostasx/pen/yGVOKQ?editors=1011" target="_blank") Let's practice a bit...

                // RESOURCES
                section
                    h3 Resources:
                    ul
                        li
                            a(href="https://www.youtube.com/watch?v=sjyJBL5fkp8" target="_blank") var, let and const - What, why and how - ES6 JavaScript Features
                        li
                            a(href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" target="_blank") JavaScript ES6+: var, let, or const?
                        li
                            <a target="_blank" href="https://in-tech-gration.github.io/WDX-180/curriculum/modules/javascript/web_apis/fetch/exercises/bitcoin-wallet/">Hands-on: Bitcoin Wallet</a><br>
                            <a class="bitly_link" target="_blank" href="https://bit.ly/2No4jlx">
                                <span>https://bit.ly/<strong>2No4jlx</strong></span>
                            </a>							
                        li 
                            a(href="https://scotch.io/tutorials/understanding-hoisting-in-javascript" target="_blank") Understanding Hoisting in JavaScript
                        li 
                            a(href="https://www.impressivewebs.com/javascript-hoisting-little-known-fact/" target="_blank") About JavaScript Hoisting
                            
                        li
                            a(href="https://www.youtube.com/watch?v=2d7s3spWAzo" target="_blank") Promises by @mpjme

                // TTS | OUTRO 
                section#tts-outro.tts-title(data-state='outro' data-transition="fade-out")

        //- SCRIPTS
        script(src='../libs/reveal.js/lib/js/head.min.js')
        script(src='../libs/reveal.js/js/reveal.js')
        script.

            Reveal.initialize({
                maxScale: 1,
                minScale: 1,
                history: true,
                dependencies: [
                    { src: '../libs/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                    { src: '../libs/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                    { src: '../libs/reveal.js/plugin/search/search.js', async: true },
                    { src: '../libs/reveal.js/plugin/zoom-js/zoom.js', async: true },
                    { src: '../libs/reveal.js/plugin/notes/notes.js', async: true }
                ]
            });

            /* TTS */
            function handleSlideDataChange( e ) {
                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")
                }    
            };

            Reveal.addEventListener( 'ready', handleSlideDataChange );
            Reveal.addEventListener( 'slidechanged', handleSlideDataChange );