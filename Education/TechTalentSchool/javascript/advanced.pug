doctype html
html(lang='en')
    head
        meta(charset='utf-8')
        title TechTalentSchool | Advanced JavaScript 
        meta(name='author' content='Kostas Minaidis')
        meta(name='apple-mobile-web-app-capable' content='yes')
        meta(name='apple-mobile-web-app-status-bar-style' content='black-translucent')
        meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
        // Bulma.io | https://cdnjs.com/libraries/bulma
        link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css')
        link(rel='stylesheet' href='../libs/reveal.js/css/reveal.css')
        link#theme(rel='stylesheet' href='../libs/reveal.js/css/theme/black-tts.css')
        link(rel='stylesheet' href='https://cdn.jsdelivr.net/npm/hack-font@3/build/web/hack.css')
        // Roboto | Google Web Fonts
        link(href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900' rel='stylesheet')
        // Theme used for syntax highlighting of code
        link(rel='stylesheet' href='../libs/reveal.js/lib/css/monokai-sublime-sha.css')
        link(rel='stylesheet' href='../css/reveal-overrides.css')
        link(rel='stylesheet' href='../css/reveal-tts.css')
        style.
            a.full-anchor {
                position: fixed;
                top     : -50%;
                left    : -50%;
                width   : 200vw;
                height  : 200vh;
                text-indent: -50000px;
            }
            .reveal .slide-background {
                background-size: contain;
            }
            .svg_contain svg {
                position:absolute;
                top     :0;
                left    :0;
                width   :100%;
                height  :auto;"
            }
        style.
            #array_recap pre.small { margin-bottom: -8px; }

        style#tts.

            .reveal.tts-intro {
                background-image: url('images/tts-titles-js-advanced.jpg');
            }
            .reveal.tts-outro {
                background-image: url('images/tts-titles-joinus.jpg');
            }
            .reveal.tts-intro,
            .reveal.tts-outro {
                background-repeat: no-repeat;
                background-size: contain;
                background-position: center;
            }
            .reveal.tts-intro .progress,
            .reveal.tts-outro .progress {
                display: none !important;
            }      

    body

        // Alt+Click | Zoom
        // S | Speaker View
        // B or . | Pause View

        .reveal
            .slides

                // TTS | INTRO
                section#tts-intro.tts-title(data-state='tts-intro' data-transition="fade-out")

                // INTRO
                section(data-transition="fade-out")
                    h2 Advanced JavaScript
                    h3.colorful Front-end Bootcamp
                    p
                        small
                            | Created by 
                            a(href='https://github.com/kostasx') Kostas Minaidis
                            |  | Dec 2018
 
                // AGENTA
                section
                    h3 Agenta
                    ul(style='font-size:0.8em;')

                        li Handling Asynchronous code with Async/Await
                        li ES6: Classes
                        li ES6: Template Literals
                        li ES6: Arrow Functions
                        li ES6: Default Function Parameters
                        li ES6: Spread Operator &amp; Destructuring Assignments

                        //- li ES6: Modules
                        //- li Types &amp; Equality
                        //- li JS Patterns: The IIFE 
                        //- li Regular Expressions

                // ASYNC / AWAIT
                section

                    section
                        h4 Handling Asynchronous Operations using
                        h1.colorful Async / Await

                    section
                        .columns
                            .column.is-8.is-offset-2
                                h6 Asynchronous Functions
                                pre.fragment
                                    code.hljs.javascript(data-trim contenteditable).

                                        async function connect(){ ... }


                                p.fragment.small An <strong class="colorful">async</strong>(hronous) function operates asynchronously, using an implicit <strong class="colorful">Promise</strong> to return its result. 

                                p.fragment.small The syntax and structure is much more like using standard synchronous functions.

                                p.small.fragment 
                                    strong.colorful Open your console and compare the result of the following commands:

                                pre.fragment
                                    code.hljs.javascript(data-trim contenteditable).
                                              function normal(){ return 42; }
                                        async function normal(){ return 42; }

                    section
                        h6 The <strong class="colorful">await</strong> keyword
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                async function connect(){
                                    const result = await promiseCommand();
                                }
                        .columns
                            .column.is-8.is-offset-2

                                p.small.fragment An async function can contain an <strong class="colorful">await</strong> expression that pauses the execution of the async function and waits for the passed Promise's resolution, and then resumes the async function's execution and returns the resolved value.
                                p.small.fragment Remember, the await keyword is only valid inside async functions.

                                a.fragment.small(target="_blank" href="https://codepen.io/kostasx/pen/ePNVbx") CodePen

                    section
                        h6 Practice makes perfect...

                        a(href="https://in-tech-gration.github.io/WDX-180/curriculum/modules/javascript/async/async_await/exercises/promise_refactoring/" target="_blank") Warming up... 

                        .linebreak

                        a(href="https://in-tech-gration.github.io/WDX-180/curriculum/modules/javascript/async/async_await/exercises/wait_for_result/" target="_blank") CodePen Exercise #1

                        .linebreak

                        a(href="https://codepen.io/kostasx/pen/oJYjYw?editors=0001" target="_blank") CodePen Exercise #2

                    section
                        h3 Example:
                        a(target="_blank" href="https://in-tech-gration.github.io/WDX-180/curriculum/modules/javascript/web_apis/fetch/exercises/bitcoin-wallet/") Hands-on: Bitcoin Wallet
                        br
                        a(class="bitly_link" target="_blank" href="https://bit.ly/2No4jlx")
                            span https://bit.ly/<strong>2No4jlx</strong>

                // ES6: CLASSES
                section
                    h2 ES6 Classes
                    h4 Syntactic Sugar for Prototypal Inheritance
                    <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">MDN ES6 Classes</a>
                    <br>
                    <p>Time for a CodePen:</p>
                    <a target="_blank" style="font-size:1.6em;" href="https://bit.ly/2Rl0PU6">https://bit.ly/<strong style="color:white;">2Rl0PU6</strong></a>

                // ES6: TEMPLATE LITERALS
                section
                    h2 ES6 Template Literals

                // ES6: ARROW FUNCTIONS
                section
                    section
                        h2 ES6 Arrow Functions
                        <a href="https://javascript.info/function-expressions-arrows#arrow-functions" target="_blank">JavaScript.info: Arrow Functions</a>
                        <br>
                        <a href="https://javascript.info/arrow-functions" target="_blank">JavaScript.info: Arrow Functions Revisited</a>
                        <hr>
                        <a href="https://codepen.io/kostasx/pen/LgVdLb?editors=0010" target="_blank">CodePen Time!</a>
                        <br>
                        <a target="_blank" href="https://bit.ly/2zIZxLF">https://bit.ly/<strong style="color:white;">2zIZxLF</strong></a>

                // ES6: Default Function Parameters
                section
                    section
                        h3 <strong class="colorful">ES6</strong>: Default Parameters
                    section
                        h3 Default Parameters in ES5?
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                function run( arg1, arg2 ){
                                    if ( typeof arg1 === "undefined" ){
                                        arg1 = "default value #1";
                                    }
                                    if ( typeof arg2 === "undefined" ){
                                        arg2 = "default value #2";
                                    }

                                    console.log( arg1, arg2 );
                                }

                                run();
                                run( 1 );
                                run( 1, 2 );
                    section
                        h3 Default Parameters in ES6!
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                function run( arg1 = "default #1", arg2 = "default #2" ){
                                    console.log( arg1, arg2 );
                                }

                                run();
                                run( 1 );
                                run( 1, 2 );

                    section
                        a(href="https://codepen.io/kostasx/pen/pqNymY?editors=1111" target="_blank") Quick Practice...

                // ES6: Destructuring Assignments
                section
                    section
                        h3 <strong class="colorful">ES6</strong> Object Destructuring 
                        p.small <strong class="colorful">Destructuring</strong> allows you to pull out data from arrays<br/>and objects into distinct variables with concise syntax.

                    section
                        h3 Destructuring Objects  
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const address = {
                                    street: 'Street',
                                    city: 'Athens',
                                    country: 'Greece'
                                }

                                const street = address.street;
                                const city = address.city;
                                const country = address.country;
                    section
                        h3 Destructuring Objects  
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const address = {
                                    street: 'Street',
                                    city: 'Athens',
                                    country: 'Greece'
                                }

                                const { street, city, country } = address;

                    section
                        h3 Destructuring Objects  
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const address = {
                                    street: 'Street',
                                    city: 'Athens',
                                    country: 'Greece'
                                }
                                const { street } = address;
                                const { city: town } = address;

                    section
                        h3 Destructuring Objects  
                        h6.fragment Before...
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function doStuff( one, two, options ) {
                                    console.log( options.a, options.b, options.c );
                                }

                                doStuff( 'example1', 'example2', {
                                    a: 'opt1',
                                    b: 'opt2',
                                    c: 'opt3'
                                });
                    section
                        h3 Destructuring Objects  
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function doStuff( one, two, { a, b, c } ) {
                                    console.log( a, b, c );
                                }

                                doStuff( 'example1', 'example2', {
                                    a: 'opt1',
                                    b: 'opt2',
                                    c: 'opt3'
                                });
                    section
                        h3 With default parameters:
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                function doStuff( one, two, { a = 'opt1', b = 'opt2', c = 'opt3' } = {} ) {
                                    console.log( a, b, c );
                                }

                                doStuff( 'example1', 'example2' );

                    section
                        h3 Array Destructuring
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                let colors = [ 255, 100, 55 ];
                                let [ red, green, blue ] = colors;

                        br
                        p.small.fragment With default values:
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                let colors = [ 255, 100 ];
                                let [ red = 99, green = 99, blue = 99 ] = colors;
                    section
                        h3 Value Swapping
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                let colorA = "Black";
                                let colorB = "White";
                                [ colorA, colorB ] = [ colorB, colorA ];

                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).

                                colorA; // "White"
                                colorB; // "Black"
                    
                    section
                        h3 Practice
                        a(href="https://codepen.io/kostasx/pen/KbNOaz?editors=0011" target="_blank") CodePen

                    section
                        h3 More Exercises!
                        ul
                            li 
                                a(target="_blank" href="https://marijnhaverbeke.nl/talks/es6_falsyvalues2015/exercises/#Avoiding_disaster") Avoiding Disaster
                            li
                                a(target="_blank" href="https://marijnhaverbeke.nl/talks/es6_falsyvalues2015/exercises/#Default_argument") Default Argument
                            li
                                a(target="_blank" href="https://marijnhaverbeke.nl/talks/es6_falsyvalues2015/exercises/#Improve_this_code") Improve this code

                // ES6: Spread Operator
                section
                    section
                        h3 <strong class="colorful">ES6</strong> Spread Operator (Arrays)
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const first = [ 1, 2, 3 ];
                                const second = [ 4, 5, 6 ];
                                const combined = first.concat( second );
                                // [ 1, 2, 3, 4, 5, 6 ]
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const combined = [ ...first, ...second ];
                                // [ 1, 2, 3, 4, 5, 6 ]
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const combined = [ ...first, 'middle', ...second, 'end' ];
                                // [ 1, 2, 3, 'middle', 4, 5, 6, 'end' ]
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const clone = [ ...first ];
                    section
                        h3 Spread Operator (Objects)
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const first = { name: "Kostas" };
                                const second = { job: "Instructor" };
                        br
                        pre.fragment
                            code.hljs.javascript(data-trim contenteditable).
                                const combined = { ...first, ...second, location: "Greece" };

                                console.log( combined );
                                // { name: "Kostas", job: "Instructor", location: "Greece" }

                                const clone = { ...first };                    
                    section
                        h3 Practice
                        a(href="https://codepen.io/kostasx/pen/VqPZJK?editors=0011" target="_blank") CodePen

                //- ES6: Modules
                //-
                    section

                        // INTRO
                        section
                            h3 <strong class="colorful">ES6</strong> Modules
                            p.small In ES6, we can use an <strong class="colorful">export</strong> token to export<br/>a module's (modules === JS files) public API
                            p.small 
                                strong.colorful lib.js:
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    // Export the function
                                    export function sayHello(){ console.log('Hello'); }

                                    // Do not export the function
                                    function somePrivateFunction(){ ...}
                            p.small.fragment <strong class="colorful">app.js</strong>: And an <strong class="colorful">import</strong> token to import parts that a module exports:
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    import { sayHello } from './lib';
                                    sayHello();  
                                    // => Hello

                        // ALIASES
                        section
                            p.small We can even give imports an alias using as:
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    import { sayHello as say } from './lib';
                                    say();  
                                    // => Hello
                            p.small.fragment ...or load an entire module at once:
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    import * as lib from './lib';
                                    lib.sayHello();  
                                    // => Hello

                        // DEFAULT EXPORTS
                        section

                            p.small The format also supports default exports:
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    // lib.js
                                    // Export default function
                                    export default function sayHello(){ console.log( 'Hello' ); }

                                    // Export non-default function
                                    export function sayBye(){ console.log('Bye'); }
        
                            p.small.fragment ...which you can import like this:
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    import sayHello, { sayBye } from './lib';
                                    sayHello();  
                                    // => Hello

                                    sayBye();  
                                    // => Bye

                        section
                            p.small You can export not only functions, but anything you like:

                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    // Export simple value
                                    export const apiUrl = '...';

                                    // Export object
                                    export const settings = {  
                                        debug: true
                                    }
                        section
                            h6 Browser Support
                            p.small The native module format is not yet supported by all browsers.

                            p.small We can use the ES6 module by using a transpiler like Babel.
                            
                        section
                            p.small Let's dive right into Practice...

                            br
                            a(href="https://codesandbox.io/s/6ljwk986yk" target="_blank") SandBox demo

                            br
                            a(href="https://codesandbox.io/s/vjqo0komxl" target="_blank") SandBox demo (final)

                //- TYPES & EQUALITY
                //- section

                //- JS PATTERNS: IIFE
                //-
                    section
                        section
                            h3 <strong class="colorful">IIFE</strong>
                            h5 Immediately Invoked Function Expression
                            .columns
                                .column.is-8.is-offset-2
                                    pre
                                        code.hljs.javascript(data-trim contenteditable).
                                            (function(){
                                                // ...
                                            })()

                                    p.small.fragment An <strong class="colorful">IIFE</strong> is an anonymous function that is invoked when it is declared.

                                    p.small.fragment Notice how the function is surrounded by parentheses. 

                        section
                            .columns
                                .column.is-8.is-offset-2
                                    p.small In JavaScript, a line starting with the word function is considered as a function declaration:
                                    pre
                                        code.hljs.javascript(data-trim contenteditable).
                                            // Function declaration
                                            function(){  
                                                console.log('test');
                                            }
                                    p.small.fragment Immediately invoking a function declaration<br/>throws an error:
                                    pre.fragment
                                        code.hljs.javascript(data-trim contenteditable).
                                            // Immediately Invoked Function Declaration
                                            function(){  
                                                console.log('test');
                                            }()
                                            // => Uncaught SyntaxError: Unexpected token )

                        section
                            .columns
                                .column.is-10.is-offset-1
                                    p.small Putting parentheses around the function makes it a function expression:

                                    pre
                                        code.hljs.javascript(data-trim contenteditable).
                                            // Function expression
                                            (function(){
                                                console.log('test');
                                            })
                                            // => returns function(){ console.log('test') }

                        section
                            .columns
                                .column.is-8.is-offset-2
                                    p.small The function expression returns the function, so we can immediately call it:
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    // Immediately Invoked Function Expression
                                    (function(){
                                        console.log('test');
                                    })()
                                    // => writes 'test' to the console and returns undefined

                        section
                            p.small We can assign the IIFE return value to a variable:
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    // Expose module as global variable
                                    let App = (function(){
                                        // Inner logic
                                        function sayHello(){
                                            console.log('Hello');
                                        }
                                        // Expose API
                                        return { sayHello: sayHello }
                                    })();
                            p.small.fragment We can now access the module's API through the variable:
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    // Access module functionality
                                    App.sayHello();  
                                    // => Hello

                        section
                            .columns
                                .column.is-8.is-offset-2
                                    h6 Immediately Invoked Function Expressions allow us to:
                                    p.small.fragment - encapsulate code complexity inside IIFE so we don't have to understand what the IIFE code does
                                    p.small.fragment - define variables inside the IIFE so they don't pollute the global scope (var, let, const statements inside the IIFE remain within the IIFE's closure)

                //- REGULAR EXPRESSIONS 
                //-
                    style.
                        .reveal table.regexp {
                            font-size: 1.5rem;
                            border: 1px solid white;
                        }                
                        .reveal table.regexp td,
                        .reveal table.regexp th {
                            border: 1px solid white;
                        }
                        .reveal table.regexp th {
                            background: orange;
                        }
                        .reveal table.regexp td {
                            background: #3b84bd;
                        }
                    section
                        section
                            h3 Regular Expressions
                            h5 The Pattern Matching Syntax
                        section
                            h6 Basic Syntax: 
                            p.small PATTERN: of characters defined by / ... /
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /PATTERN/;  // Define Regular Expression
                            br
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    regExp.test( "Text" );  // Tests for PATTERN inside "Text"
                            br
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    regExp.exec( "Text" ); // Find PATTERN matches in "Text"
                            br
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    "Text".split( regExp ); // Split 'Text' using regExp
                            br
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    "Text".replace( regExp, "replacement" ); // Replace pattern in 'Text'
                        // TABLE
                        section
                            h6 PATTERNS can be:
                            table.regexp
                                thead
                                    tr
                                        th PATTERN
                                        th MATCHES
                                        th EXAMPLE
                                tbody
                                    tr
                                        td abc
                                        td plain text characters
                                        td 'abc'
                                    tr
                                        td [a-z]
                                        td lowercase group
                                        td 'abcdef'
                                    tr
                                        td \w+
                                        td word
                                        td 'Magic'
                                    tr
                                        td \d
                                        td digit
                                        td 9
                                    tr
                                        td \s
                                        td space
                                        td ''
                                    tr
                                        td .*
                                        td wildcard
                                        td 'username74'
                                    tr
                                        td + or *
                                        td greedy mattch
                                        td 'aaaaaa'
                                    tr
                                        td \S
                                        td NOT space
                                        td 'no_spaces'
                                    tr
                                        td ^, $
                                        td Start / End of pattern
                                        td '^Phrase$'

                            p.small More: <a target="_blank" href="https://www.w3schools.com/jsref/jsref_obj_regexp.asp"> W3Schools</a>

                        // EXAMPLES
                        section
                            h6 Examples
                            p.small Open <a href="https://regex101.com/" target="_blank">regex101.com</a> or <a href="https://www.regexpal.com/" target="_blank">www.regexpal.com</a>

                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /abc/;
                                    let match = regExp.exec ("abcd ABCD abcd" );
                                    console.log( match[0] );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /[a-c]/;
                                    match = regExp.exec ("abcd ABCD abcd" );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /[a-c]+/;
                                    match = regExp.exec ("abcd ABCD abcd" );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /[a-zA-Z]+/;
                                    match = regExp.exec ("abcd ABCD abcd" );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /[a-z0-9]+/;
                                    match = regExp.exec ("abcd 1234" );

                        section
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /\w/;
                                    regExp.exec ("Some words in here." );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /\w+/;
                                    regExp.exec ("Some words in here." );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /\d+/;
                                    regExp.exec ("Some digits 123456 in here." );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /\d{1,3}/;
                                    regExp.exec ("Some digits 123456 in here." );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /\d{1,3}/;
                                    regExp.exec ("Some digits 123456 in here." );
                            pre.fragment
                                code.hljs.javascript(data-trim contenteditable).
                                    let regExp = /^Some|here.$/;
                                    regExp.exec ("Some digits 123456 in here." );

                        // FLAGS
                        section
                            h6 Flags
                            .columns
                                .column.is-6.is-offset-3
                                    pre
                                        code.hljs.javascript(data-trim contenteditable).
                                            let regExp = /PATTERN/FLAGS;
                                    p.small.fragment Some basic Flags can be:
                                    p.small.fragment <strong class="colorful">g:</strong> global match; find all matches rather than stopping after the first match
                                    p.small.fragment <strong class="colorful">i:</strong> ignore case; 
                                    p.small.fragment <strong class="colorful">m:</strong> multiline; 
                                    pre.fragment
                                        code.hljs.javascript(data-trim contenteditable).
                                            let regExp = /[a-zA-Z]/gi;
                        // REGEXP PROPERTIES
                        section
                            h6 RegExp Object Properties
                            pre
                                code.hljs.javascript(data-trim contenteditable).
                                    let myRegExp = /example/ig

                                    // The flags property
                                    console.log( myRegExp.flags ) // "gi"

                                    // The global property
                                    console.log( myRegExp.global ) // true

                                    // The multiline property
                                    console.log( myRegExp.multiline ) // false

                                    // The source property
                                    console.log( myRegExp.source ) // /example/

                        // PRACTICE
                        section
                            h3 Practice
                            a.small(href="https://regexone.com/" target="_blank") https://regexone.com/
                            br
                            a.small(href="https://codeburst.io/javascript-learn-regular-expressions-for-beginners-bb6107015d91" target="_blank") JavaScript: Learn Regular Expressions for Beginners 
                            br
                            a.small(href="https://alf.nu/RegexGolf" target="_blank") RegexGolf

                // RESOURCES
                section
                    h3 Resources:
                    ul
                        li.small
                            a(href="https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes") You Don't Know JS: this &amp; Object Prototypes
                        li.small
                            a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this") Read about this at MDN
                        li.small
                            a(href="https://codeburst.io/es6-destructuring-the-complete-guide-7f842d08b98f") ES6 Destructuring: The Complete Guide
                        li.small
                            a(href="https://alligator.io/js/modules-es6/") ES6 Modules (alligator.io)
                        li.small
                            a(href="https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers#es6moduleformat") A 10 minute primer to JavaScript modules, ... [ES6 Section]
                        li.small
                            a(href="https://flaviocopes.com/javascript-regular-expressions/") A GUIDE TO JAVASCRIPT REGULAR EXPRESSIONS
                        li.small
                            a(href="https://codeburst.io/javascript-learn-regular-expressions-for-beginners-bb6107015d91") JavaScript: Learn Regular Expressions for Beginners
                        li.small
                            a(target="_blank" href="https://in-tech-gration.github.io/WDX-180/curriculum/modules/javascript/web_apis/fetch/exercises/bitcoin-wallet/") Hands-on: Bitcoin Wallet
                            br
                            a(class="bitly_link" target="_blank" href="https://bit.ly/2No4jlx")
                                span https://bit.ly/<strong>2No4jlx</strong>

                // TTS | OUTRO 
                section#tts-outro.tts-title(data-state='outro' data-transition="fade-out")

        //- SCRIPTS
        script(src='../libs/reveal.js/lib/js/head.min.js')
        script(src='../libs/reveal.js/js/reveal.js')
        script.

            Reveal.initialize({

                history: true,
                dependencies: [
                    { src: '../libs/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                    { src: '../libs/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                    { src: '../libs/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                    { src: '../libs/reveal.js/plugin/search/search.js', async: true },
                    { src: '../libs/reveal.js/plugin/zoom-js/zoom.js', async: true },
                    { src: '../libs/reveal.js/plugin/notes/notes.js', async: true }
                ]
            });

            Reveal.addEventListener( 'ready', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    

            });

            /* TTS */

            Reveal.addEventListener( 'slidechanged', function( e ) {

                let slideState = e.currentSlide.getAttribute('data-state');
                switch ( slideState ) {
                    case 'tts-intro':
                        console.log('tts-intro');
                        document.querySelector(".reveal").classList.add("tts-intro")
                        break;
                    case 'intro':
                        console.log('intro');
                        document.querySelector(".reveal").classList.remove("tts-intro")
                        break;
                    case 'outro':
                        console.log('outro');
                        document.querySelector(".reveal").classList.add("tts-outro")
                        break;
                    default:
                        console.log("default");
                        document.querySelector(".reveal").classList.remove("tts-outro")
                        document.querySelector(".reveal").classList.remove("tts-intro")

                }    
                // event.indexh
                
            });
